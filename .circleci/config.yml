version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.0

executors:
  golang:
    docker:
      - image: cimg/go:1.17

commands:
  build_and_zip:
    parameters:
      output_file:
        type: string
    steps:
      - run:
          name: Build and Zip
          command: |
            GOOS=linux go build -o << parameters.output_file >> main.go
            zip << parameters.output_file >>.zip << parameters.output_file >>

jobs:
  build:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Download Go Modules
          command: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - build_and_zip:
          output_file: main
      - persist_to_workspace:
          root: .
          paths:
            - main.zip

  deploy:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - aws-cli/setup
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}"
            aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}"
            aws configure set region "${AWS_REGION}"
            if [ -n "${AWS_SESSION_TOKEN}" ]; then
              aws configure set aws_session_token "${AWS_SESSION_TOKEN}"
            fi
      - run:
          name: Deploy
          command: |
            aws lambda update-function-code --function-name "${AWS_LAMBDA_FUNCTION_NAME}" --zip-file fileb:///tmp/workspace/main.zip

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
